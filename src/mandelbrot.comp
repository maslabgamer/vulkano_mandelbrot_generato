#version 450

// Each invocation will write to pixel (x, y) of the image
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Declares the presence of the image we're going to use
layout(set = 0, binding = 0, rgba8) uniform writeonly image2D img;

void main() {
    // vec2 is equivalent to [f32; 2], usually used to store 2D coordinates
    // Similarly, ivec4 is [i32; 4], uvec3 = [u32; 3]
    // Since the Mandelbrot set is a set of complex numbers, we use several vec2s to store
    // the real and imaginary parts of the complex numbers we want to manipulate
    vec2 norm_coordinates = (gl_GlobalInvocationID.xy + vec2(0.5)) / vec2(imageSize(img));
    vec2 c = (norm_coordinates - vec2(0.5)) * 2.0 - vec2(1.0, 0.0);

    // Now we want to check if the complex number we're manipulating is in the Mandelbrot set
    // Definition is that a number c is within the set if the function f(z) = z^2 + c diverges
    // when iterated from z = 0 (with z being a complex number)
    // We do this in the loop by starting at z = 0.0
    // c is in the set if we are not diverging (length of z is less or equal to 4.0)
    // i will be 1.0
    // for loop will not break
    vec2 z = vec2(0.0, 0.0);
    float i;
    for (i = 0.0; i < 1.0; i += 0.005) {
        z = vec2(
            z.x * z.x - z.y * z.y + c.x,
            z.y * z.x + z.x * z.y + c.y
        );

        if (length(z) > 4.0) {
            break;
        }
    }

    // Convert function i to a vec3, then create a new vec4 with 1.0 as our fourth item by default
    // In this case, vec3(i) is a shortcut for vec3(i, i, i)
    vec4 to_write = vec4(vec3(i), 1.0);
    // Write the pixel of an image to the image with imageStore
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), to_write);
}
